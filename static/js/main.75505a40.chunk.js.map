{"version":3,"sources":["components/game.js","components/BoardComp.js","components/Title.js","components/Controls.js","components/Tile.js","App.js","index.js"],"names":["createBoard","retBoard","i","j","random","Math","push","console","log","oneDimensional","arr","retArr","length","concat","tileClick","e","getNextBoard","_board","theNextBoard","forEach","row","rowIndex","cell","cellIndex","fate","buddies","_rowIndex","_cellIndex","cellIsOccupied","__rowIndex","__cellIndex","undefined","numberOfBuds","countCellBuddies","Board","board","className","Title","Controller","nextBoard","onClick","Tile","style","id","game","require","sampleBoard","App","useState","currentBoard","setBoard","change","setChange","clickChanger","target","el","document","getElementById","color","window","getComputedStyle","getPropertyValue","floor","col","useEffect","black","background","green","a","nextArry","map","tile","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.75505a40.chunk.js","sourcesContent":["/*\nList of funcitons available\n1.createBoard: Creates a 2D board \n2.oneDimensional: converts a passed in 2 dimensional array to 1 dimension\n\n\n*/\n\n//for creating a board\n\nconst createBoard = () =>{\n    var retBoard = [];\n    for(var i=0;i<30;i++){\n        retBoard[i]= [];\n        for(var j=0; j<50;j++){\n            var random = Math.random()-0.3; //prevents too many green cells\n            //any chnages to 0.3 will effect the click funciton so change it there too.\n            retBoard[i].push(random);\n        }\n    }\n    console.log(\"the retBoard is \", retBoard);\n    return retBoard;\n}\n\nconst oneDimensional = (arr) =>{\n    var retArr = [];\n    //console.log(\"passed array is \", arr);\n    for(var i=0;i<arr.length; i++){\n        //console.log(arr[i]);\n        retArr = retArr.concat(arr[i]);\n        //console.log(\"ret arra\" ,retArr);\n    }\n    return retArr;\n}\n\n\n\n\nconst tileClick = (e) =>{\n    /* console.log(\"some one clicked a tile\");\n    console.log(e.target.style);\n    var id = e.target.id; */\n    \n\n}\n\nfunction getNextBoard(_board) {\n    let theNextBoard = [];\n    _board.forEach((row, rowIndex) => {\n      theNextBoard.push([]); // creates 30 new empty rows\n      row.forEach((cell, cellIndex) => {\n        // send the index of each row, and for each row, \n        // the index of each cell to countCellBuddies \n        // function, then check that cell's buddies to\n        // make the decisions below.\n        let buddies = countCellBuddies(rowIndex, cellIndex, _board);\n        let life = 1,\n            death = 0,\n            fate;\n        // Conway's Rules:\n        if (cell >= 0.5) { // Cell is 'alive':\n          // Any live cell with two or three live neighbours lives on.\n          // Any live cell with fewer than two live neighbours dies.\n          // Any live cell with more than three live neighbours dies.\n          fate = buddies >= 2 && buddies <= 3 ? life : death;\n        } else { // Cell is 'dead':\n          // Any dead cell with exactly three live neighbours  \n          // becomes a live cell.\n          fate = buddies === 3 ? life : death;\n        }\n        // pushes 50 live or dead cells onto each new row\n        theNextBoard[rowIndex].push(fate); \n      });\n    });\n    // updated 50 x 30 board:\n    console.log(theNextBoard, \"nextboard is \")\n    return theNextBoard; \n  }\n\n\n  function countCellBuddies(_rowIndex, _cellIndex, _board){\n    \n    // cellIsOccupied accepts a set of 'coordinates', if you will, where\n    // the x-coord is the index of a given 'row' on the multi-dim board \n    // array, and the y-coord is the index of each 'cell' that is a part of \n    // that row. This can be looked at as a sort of reverse/upsidedown \n    // graph, becuase the cell represented by coords [0, 0] is the\n    // top-most left-most cell, rather than a typical graph where \n    // [0, 0] would be bottom left.\n\n    // That said, when checking the very first cell's buddies, \n    // cellIsOccupied() will be passed -1, -1 (to check \n    // for buddy up one and to the left), since the position \n    // of that cell is at the zeroeth index of the array that is \n    // at the zeroeth index of the parent mulit-dim array.\n    // _board[-1] will return undefined, making further checks moot. \n    // We must, then,  account for cells on edges when checking for \n    // buddies to ensure accurate results, and more importantly,\n    // to keep the code from breaking, since not every cell has 8 \n    // potential neighbors.\n    \n    // Must be kept within the scope of countCellBuddies\n    // in order to be more easily accessed. \n    function cellIsOccupied(__rowIndex, __cellIndex) {\n      if (_board[__rowIndex] !== undefined) {\n        return _board[__rowIndex][__cellIndex];\n      }\n    }\n    \n    // The table below shows the distance \n    // from x & y that we must go to check the cell in the position \n    // represented by the table. The if statements below are based on \n    // this \"buddy table\".\n    \n    let numberOfBuds = 0;\n    // The Buddy Table: \n    // [-1, -1], [-1,  0], [-1, +1], --> above\n    // [0,  -1], [ CELL ], [0,  +1], --> our row\n    // [+1, -1], [+1,  0], [+1, +1]; --> below\n\n    // checks cell above and to the left\n    if (cellIsOccupied(_rowIndex - 1, _cellIndex - 1)>=0.5) numberOfBuds++;\n    // checks cell above\n    if (cellIsOccupied(_rowIndex - 1, _cellIndex)>=0.5) numberOfBuds++;\n    // checks cell above and to the right\n    if (cellIsOccupied(_rowIndex - 1, _cellIndex + 1)>=0.5) numberOfBuds++;\n    // checks cell to the left\n    if (cellIsOccupied(_rowIndex, _cellIndex - 1)>=0.5) numberOfBuds++;\n    // checks cell to the right\n    if (cellIsOccupied(_rowIndex, _cellIndex + 1)>=0.5) numberOfBuds++;\n    // checks cell below and to the left\n    if (cellIsOccupied(_rowIndex + 1, _cellIndex - 1)>=0.5) numberOfBuds++;\n    // checks cell below\n    if (cellIsOccupied(_rowIndex + 1, _cellIndex)>=0.5) numberOfBuds++;\n    // checks cell below and to the right\n    if (cellIsOccupied(_rowIndex + 1, _cellIndex + 1)>=0.5) numberOfBuds++;\n\n    return numberOfBuds;\n  }\n\n\n\nexport {createBoard,oneDimensional,getNextBoard,tileClick};","import React from 'react';\n\n\n\n\nconst Board = ({board})=>{\n\n    return(\n        <div className=\"mainBoard\">\n            <div className=\"board\" >\n                {/*console.log(TileCount, \"from board\")*/}\n                {board}\n            </div>\n        </div>\n\n    );\n}\n\n\nexport default Board;","import React from 'react';\n\n\nconst Title = () =>{\n    return(\n        <div className=\"title\">\n            <h3> Conway's game of Life</h3>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\n\n//var game = require('./game');\n\nconst Controller = ({nextBoard}) =>{\n\n    return(\n        <button className=\"next\" onClick={nextBoard}> Next Iteration</button>\n    );\n}\n\nexport default Controller;","import React from 'react';\n\n\nconst Tile = ({style,id,tileClick}) =>{\n\n    /* the styling is done using the border box and float left properties */\n    return(\n        <div className=\"tile\" onClick={tileClick} style={style} id={id}>{}</div>\n        );\n}\n\n\nexport default Tile;","\nimport './App.css';\n\nimport React, { useEffect } from 'react';\nimport Board from './components/BoardComp';\nimport Title from './components/Title';\nimport Controller from './components/Controls';\nimport {useState} from 'react';\nimport Tile from './components/Tile';\n\nvar game = require('./components/game');\nconst sampleBoard = game.createBoard();\n\nfunction App() {\n\n  const [currentBoard,setBoard] = useState(sampleBoard);\n  const [change,setChange]  = useState(0);\n\n  const clickChanger=(e)=> {\n    // pass key, get row and column coords\n    // update that index to alive or dead\n    // according to current state of cell\n    let id = e.target.id;\n    let el = document.getElementById(id);\n    let color = window.getComputedStyle(el).getPropertyValue('background');\n    \n    console.log(\"id is :\" + id + \" element id el: \" + el + \" color: \" + color);\n\n    let row = Math.floor(id/50);\n    let col = id % 50;\n    if(currentBoard[row][col]<0.2){ //refer game logic \n      currentBoard[row][col] = 1;\n    }else{\n      currentBoard[row][col] = 0;\n    }\n    \n    setBoard(currentBoard);\n\n    setChange(change+1);\n\n    console.log(\"click change\" ,change)\n    \n  }\n  useEffect(()=>{\n\n    console.log(\"render\");\n  },[change])\n\n  const black = { background: 'black' };\n  const green = { background: '#66ff33' };\n\n  async function nextBoard(){\n   const nextArry =  await game.getNextBoard(currentBoard);\n   setBoard(nextArry);\n   setChange(change+1);\n  }\n  \n  \n  //console.log(\"2d arr is \" , currentBoard);\n\n  const arr = game.oneDimensional(currentBoard);\n  //console.log(\"1d array is \" , arr);\n  const board = arr.map((tile,i)=>{\n    //console.log(\"reforming board\");\n      if(tile<0.5){\n          return(\n              <Tile style={black} id={i} key={i} tileClick = {clickChanger} />\n          );   \n      }else{\n          return(\n              <Tile style={green} id={i} key={i} tileClick = {clickChanger}/>\n          );\n      }\n      \n  });\n  \n  return (\n    <div className=\"App\">\n      <Title />  \n      <Board board={board} />\n      <Controller nextBoard={nextBoard} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}